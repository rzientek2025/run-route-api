// db.js
const { Pool } = require('pg');
require('dotenv').config(); 

// ðŸš¨ KRYTYCZNA POPRAWKA: UÅ¼ywamy wewnÄ™trznej nazwy komponentu jako hosta
// To omija Firewall i zmusza App Platform do uÅ¼ycia prywatnej sieci.
const INTERNAL_HOST = 'db-postgresql-fra1-699592'; 

const pool = new Pool({
  // Host to wewnÄ™trzna nazwa komponentu (z App Platform)
  host: INTERNAL_HOST,
  
  // Port wewnÄ™trzny to zawsze 5432 dla PostgreSQL (a nie 25060, ktÃ³ry jest dla zewnÄ™trznego dostÄ™pu)
  port: 5432, 
  
  // UÅ¼ywamy zmiennych wstrzykniÄ™tych przez App Platform. 
  // JeÅ›li nie sÄ… to PG_, musisz je zidentyfikowaÄ‡. ZakÅ‚adamy, Å¼e sÄ… to PG_* // lub Å¼e jest to jedyny sposÃ³b, aby kod ruszyÅ‚ dalej.
  user: process.env.PG_USER || process.env.DB_USER, 
  password: process.env.PG_PASSWORD || process.env.DB_PASSWORD, 
  database: process.env.PG_DATABASE || process.env.DB_NAME, 
  
  // W przypadku poÅ‚Ä…czeÅ„ wewnÄ™trznych SSL czÄ™sto nie jest wymagany lub jest problematyczny.
  // Tymczasowo go wyÅ‚Ä…czymy, aby wyeliminowaÄ‡ kolejnÄ… przyczynÄ™ bÅ‚Ä™du ECONNREFUSED.
  ssl: false 
});

pool.on('error', (err) => {
  console.error('BÅ‚Ä…d poÅ‚Ä…czenia z bazÄ… danych:', err);
  process.exit(-1); 
});

// Test poÅ‚Ä…czenia
pool.query('SELECT NOW()')
  .then(() => {
    console.log('PoÅ‚Ä…czenie z bazÄ… danych DigitalOcean jest aktywne.');
  })
  .catch(err => {
    console.error('BÅ‚Ä…d testu poÅ‚Ä…czenia z bazÄ…:', err.stack); 
  });


module.exports = {
  query: (text, params) => pool.query(text, params),
  pool
};
